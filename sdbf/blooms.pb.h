// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blooms.proto

#ifndef PROTOBUF_blooms_2eproto__INCLUDED
#define PROTOBUF_blooms_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace blooms {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_blooms_2eproto();
void protobuf_AssignDesc_blooms_2eproto();
void protobuf_ShutdownFile_blooms_2eproto();

class BloomFilter;
class BloomVector;

// ===================================================================

class BloomFilter : public ::google::protobuf::Message {
 public:
  BloomFilter();
  virtual ~BloomFilter();

  BloomFilter(const BloomFilter& from);

  inline BloomFilter& operator=(const BloomFilter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BloomFilter& default_instance();

  void Swap(BloomFilter* other);

  // implements Message ----------------------------------------------

  BloomFilter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BloomFilter& from);
  void MergeFrom(const BloomFilter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 bf_size = 1;
  inline bool has_bf_size() const;
  inline void clear_bf_size();
  static const int kBfSizeFieldNumber = 1;
  inline ::google::protobuf::uint64 bf_size() const;
  inline void set_bf_size(::google::protobuf::uint64 value);

  // optional uint64 max_elem = 2;
  inline bool has_max_elem() const;
  inline void clear_max_elem();
  static const int kMaxElemFieldNumber = 2;
  inline ::google::protobuf::uint64 max_elem() const;
  inline void set_max_elem(::google::protobuf::uint64 value);

  // optional uint64 elem_count = 3;
  inline bool has_elem_count() const;
  inline void clear_elem_count();
  static const int kElemCountFieldNumber = 3;
  inline ::google::protobuf::uint64 elem_count() const;
  inline void set_elem_count(::google::protobuf::uint64 value);

  // optional uint32 id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated fixed64 filter = 6;
  inline int filter_size() const;
  inline void clear_filter();
  static const int kFilterFieldNumber = 6;
  inline ::google::protobuf::uint64 filter(int index) const;
  inline void set_filter(int index, ::google::protobuf::uint64 value);
  inline void add_filter(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      filter() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_filter();

  // @@protoc_insertion_point(class_scope:blooms.BloomFilter)
 private:
  inline void set_has_bf_size();
  inline void clear_has_bf_size();
  inline void set_has_max_elem();
  inline void clear_has_max_elem();
  inline void set_has_elem_count();
  inline void clear_has_elem_count();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 bf_size_;
  ::google::protobuf::uint64 max_elem_;
  ::google::protobuf::uint64 elem_count_;
  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > filter_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_blooms_2eproto();
  friend void protobuf_AssignDesc_blooms_2eproto();
  friend void protobuf_ShutdownFile_blooms_2eproto();

  void InitAsDefaultInstance();
  static BloomFilter* default_instance_;
};
// -------------------------------------------------------------------

class BloomVector : public ::google::protobuf::Message {
 public:
  BloomVector();
  virtual ~BloomVector();

  BloomVector(const BloomVector& from);

  inline BloomVector& operator=(const BloomVector& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BloomVector& default_instance();

  void Swap(BloomVector* other);

  // implements Message ----------------------------------------------

  BloomVector* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BloomVector& from);
  void MergeFrom(const BloomVector& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 filter_count = 1;
  inline bool has_filter_count() const;
  inline void clear_filter_count();
  static const int kFilterCountFieldNumber = 1;
  inline ::google::protobuf::int32 filter_count() const;
  inline void set_filter_count(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional uint64 filesize = 4;
  inline bool has_filesize() const;
  inline void clear_filesize();
  static const int kFilesizeFieldNumber = 4;
  inline ::google::protobuf::uint64 filesize() const;
  inline void set_filesize(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:blooms.BloomVector)
 private:
  inline void set_has_filter_count();
  inline void clear_has_filter_count();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_filesize();
  inline void clear_has_filesize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 filter_count_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::uint64 filesize_;
  friend void  protobuf_AddDesc_blooms_2eproto();
  friend void protobuf_AssignDesc_blooms_2eproto();
  friend void protobuf_ShutdownFile_blooms_2eproto();

  void InitAsDefaultInstance();
  static BloomVector* default_instance_;
};
// ===================================================================


// ===================================================================

// BloomFilter

// optional uint64 bf_size = 1;
inline bool BloomFilter::has_bf_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BloomFilter::set_has_bf_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BloomFilter::clear_has_bf_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BloomFilter::clear_bf_size() {
  bf_size_ = GOOGLE_ULONGLONG(0);
  clear_has_bf_size();
}
inline ::google::protobuf::uint64 BloomFilter::bf_size() const {
  // @@protoc_insertion_point(field_get:blooms.BloomFilter.bf_size)
  return bf_size_;
}
inline void BloomFilter::set_bf_size(::google::protobuf::uint64 value) {
  set_has_bf_size();
  bf_size_ = value;
  // @@protoc_insertion_point(field_set:blooms.BloomFilter.bf_size)
}

// optional uint64 max_elem = 2;
inline bool BloomFilter::has_max_elem() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BloomFilter::set_has_max_elem() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BloomFilter::clear_has_max_elem() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BloomFilter::clear_max_elem() {
  max_elem_ = GOOGLE_ULONGLONG(0);
  clear_has_max_elem();
}
inline ::google::protobuf::uint64 BloomFilter::max_elem() const {
  // @@protoc_insertion_point(field_get:blooms.BloomFilter.max_elem)
  return max_elem_;
}
inline void BloomFilter::set_max_elem(::google::protobuf::uint64 value) {
  set_has_max_elem();
  max_elem_ = value;
  // @@protoc_insertion_point(field_set:blooms.BloomFilter.max_elem)
}

// optional uint64 elem_count = 3;
inline bool BloomFilter::has_elem_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BloomFilter::set_has_elem_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BloomFilter::clear_has_elem_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BloomFilter::clear_elem_count() {
  elem_count_ = GOOGLE_ULONGLONG(0);
  clear_has_elem_count();
}
inline ::google::protobuf::uint64 BloomFilter::elem_count() const {
  // @@protoc_insertion_point(field_get:blooms.BloomFilter.elem_count)
  return elem_count_;
}
inline void BloomFilter::set_elem_count(::google::protobuf::uint64 value) {
  set_has_elem_count();
  elem_count_ = value;
  // @@protoc_insertion_point(field_set:blooms.BloomFilter.elem_count)
}

// optional uint32 id = 4;
inline bool BloomFilter::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BloomFilter::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BloomFilter::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BloomFilter::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 BloomFilter::id() const {
  // @@protoc_insertion_point(field_get:blooms.BloomFilter.id)
  return id_;
}
inline void BloomFilter::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:blooms.BloomFilter.id)
}

// optional string name = 5;
inline bool BloomFilter::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BloomFilter::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BloomFilter::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BloomFilter::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BloomFilter::name() const {
  // @@protoc_insertion_point(field_get:blooms.BloomFilter.name)
  return *name_;
}
inline void BloomFilter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:blooms.BloomFilter.name)
}
inline void BloomFilter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:blooms.BloomFilter.name)
}
inline void BloomFilter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:blooms.BloomFilter.name)
}
inline ::std::string* BloomFilter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:blooms.BloomFilter.name)
  return name_;
}
inline ::std::string* BloomFilter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BloomFilter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:blooms.BloomFilter.name)
}

// repeated fixed64 filter = 6;
inline int BloomFilter::filter_size() const {
  return filter_.size();
}
inline void BloomFilter::clear_filter() {
  filter_.Clear();
}
inline ::google::protobuf::uint64 BloomFilter::filter(int index) const {
  // @@protoc_insertion_point(field_get:blooms.BloomFilter.filter)
  return filter_.Get(index);
}
inline void BloomFilter::set_filter(int index, ::google::protobuf::uint64 value) {
  filter_.Set(index, value);
  // @@protoc_insertion_point(field_set:blooms.BloomFilter.filter)
}
inline void BloomFilter::add_filter(::google::protobuf::uint64 value) {
  filter_.Add(value);
  // @@protoc_insertion_point(field_add:blooms.BloomFilter.filter)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
BloomFilter::filter() const {
  // @@protoc_insertion_point(field_list:blooms.BloomFilter.filter)
  return filter_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
BloomFilter::mutable_filter() {
  // @@protoc_insertion_point(field_mutable_list:blooms.BloomFilter.filter)
  return &filter_;
}

// -------------------------------------------------------------------

// BloomVector

// optional int32 filter_count = 1;
inline bool BloomVector::has_filter_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BloomVector::set_has_filter_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BloomVector::clear_has_filter_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BloomVector::clear_filter_count() {
  filter_count_ = 0;
  clear_has_filter_count();
}
inline ::google::protobuf::int32 BloomVector::filter_count() const {
  // @@protoc_insertion_point(field_get:blooms.BloomVector.filter_count)
  return filter_count_;
}
inline void BloomVector::set_filter_count(::google::protobuf::int32 value) {
  set_has_filter_count();
  filter_count_ = value;
  // @@protoc_insertion_point(field_set:blooms.BloomVector.filter_count)
}

// optional string name = 2;
inline bool BloomVector::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BloomVector::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BloomVector::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BloomVector::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BloomVector::name() const {
  // @@protoc_insertion_point(field_get:blooms.BloomVector.name)
  return *name_;
}
inline void BloomVector::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:blooms.BloomVector.name)
}
inline void BloomVector::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:blooms.BloomVector.name)
}
inline void BloomVector::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:blooms.BloomVector.name)
}
inline ::std::string* BloomVector::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:blooms.BloomVector.name)
  return name_;
}
inline ::std::string* BloomVector::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BloomVector::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:blooms.BloomVector.name)
}

// optional int32 id = 3;
inline bool BloomVector::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BloomVector::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BloomVector::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BloomVector::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 BloomVector::id() const {
  // @@protoc_insertion_point(field_get:blooms.BloomVector.id)
  return id_;
}
inline void BloomVector::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:blooms.BloomVector.id)
}

// optional uint64 filesize = 4;
inline bool BloomVector::has_filesize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BloomVector::set_has_filesize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BloomVector::clear_has_filesize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BloomVector::clear_filesize() {
  filesize_ = GOOGLE_ULONGLONG(0);
  clear_has_filesize();
}
inline ::google::protobuf::uint64 BloomVector::filesize() const {
  // @@protoc_insertion_point(field_get:blooms.BloomVector.filesize)
  return filesize_;
}
inline void BloomVector::set_filesize(::google::protobuf::uint64 value) {
  set_has_filesize();
  filesize_ = value;
  // @@protoc_insertion_point(field_set:blooms.BloomVector.filesize)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace blooms

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_blooms_2eproto__INCLUDED
